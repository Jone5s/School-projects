/*
Sulautettujen järjestelmien kurssilla toteutettu projekti C++:lla ja arduino Nano:lla.
Kyseessä oli ledeillä toteutettu muistipeli, jossa 2 x 3 kokoisessa led:ruudukossa ledit vilkkuivat yksi
kerrallaan satunnaisessa järjestyksessä. Pelaajan oli muistettava ledien järvestys ja paineltava se näppäimistöltä. 
Pelaajan muistaessa kyseisen kierroksen järjestys oikein, alkoi uusi kierros jossa ketju oli yhden pidempi.
Jos pelaaja paineli ketjun väärin, hän hävisi pelin. Silloin verrattiin oliko kyseessä ennätys ja jos oli,
pisteet laitettiin muistiin.
Pisteet ja ohjeet peliin näkyivät lcd-näytöllä.
*/

#include <Keypad.h>
#include <TimerOne.h>
#include <avr/wdt.h>
#include <EEPROM.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 20, 4);

const int ROW_NUM = 4; //four rows
const int COLUMN_NUM = 4; //four columns
int ledPin;
int ledState = LOW;
volatile int randNumber = 1; // satunnaislukumuuttuja
volatile int lastRand = 0; // muuttuja johon tallennetaan edellinen satunnaisluku
volatile int sequence[19], sekvenssint[19]; // sekvenssi-jotka numerot pitää pelaajan painaa ja pelaajan painamat numerot
volatile char pressed[19]; // painettujen nappuloiden taulukko
int i = 0,a = 0; //laskurimuuttujat
volatile bool gaming = false; // sarja syötettiin väärin
volatile bool winning = true; //sarja syötettiin oikein
volatile int req = 3; // sarja, kuinka monta lediä vilkkuu
int ennatus;


char keys[ROW_NUM][COLUMN_NUM] = { //keymapataan näppäimistö
  {'1','2','3', 'A'},
  {'4','5','6', 'B'},
  {'7','8','9', 'C'},
  {'*','0','#', 'D'}
};

byte pin_rows[ROW_NUM] = {9, 8, 7, 6}; //yhdistetään pinout rivit näppäimistöön 
byte pin_column[COLUMN_NUM] = {5, 4, 3, 2}; //yhdistetään pinout kolumni näppäimistöön

Keypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM ); //keymapataan näppäimistö

void setup(){
   Serial.begin(9600);
   lcd.init();
   lcd.begin(20, 4);
   lcd.backlight(); // alustetaan lcd
   pinMode(A0, OUTPUT);
   pinMode(A1, OUTPUT);
   pinMode(A2, OUTPUT);
   pinMode(A3, OUTPUT);
   pinMode(A4, OUTPUT);
   pinMode(A5, OUTPUT);
   pinMode(A6, OUTPUT);
   //pinMode(A7, OUTPUT);
   pinMode(10, OUTPUT);
   pinMode(11, OUTPUT);
   pinMode(12, OUTPUT); // asetetaan pinnit outputeiksi
   randomSeed(analogRead(A7)); // luodaan "siemen" randomgeneroinnille
   Timer1.initialize(250000); // aloitetaan Timer1
   ennatus = EEPROM.read(0); // luetaan ennätys EEPROMista
   lcd.print("Tervetuloa");
   lcd.setCursor(0,2);
   lcd.print("Highscore:");
   lcd.setCursor(0,3);
   lcd.print(ennatus); //tulostetaan highscore
   keypad.waitForKey();
   lcd.clear();
}

void loop(){
  
  digitalWrite(12, LOW);
  delay(500);
  while(i < req){ // looppaa kunnes sekvenssi on niin pitkä, kuin tämänhetkinen "vaikeustaso"
  while(randNumber == lastRand){ // luodaan random numero, niin kauan että luotu numero on eri, kuin edellinen blinkattu numero
  randNumber = random(1, 7);} // random numero 1-6
   
  sequence[i] = randNumber;  // lisätään sekvenssiin seuraava numero
  lastRand = randNumber; 
  ledPins(sequence[i]); // ajetaan aliohjelmaa ja valitaan random numeroa vastaava led
  digitalWrite(ledPin, HIGH);
  delay(700);
  digitalWrite(ledPin, LOW);
  delay(300); // blinkataan valittua lediä
  i++; // lisätään laskentaan käyty kierros
    
  }
  for (int i = 0;i<req;i++){
    Serial.print(sequence[i]);
  } // Printataan sarjamonitoriin sekvenssi, testausta helpottamaan
  while(a < req){ // käyttäjän vastausaika alkaa
    
    pressed[a] = keypad.waitForKey(); // odotetaan keypadin painallusta
    sekvenssint[a] = pressed[a] -'0'; // muutetaan pressed-taulukko int muotoon
    if(sekvenssint[a] == sequence[a]){ // verrataan, onko painettu numero oikea
    Serial.print(sekvenssint[a]);
    a++;}
    else{
    Timer1.attachInterrupt(blinkLED); //punainen ledi vilkkuu pelaajan hävitessä
    lcd.clear();
    if(a > ennatus){
    a = a + 3; // a-alkaa nollasta, kun taas peli alkaa 3:n sarjalla, lisätään siis ennätykseen 3 helppolukuisuuden vuoksi
    EEPROM.write(0, a); // tallennetaan ennätys EEPROM-muistiin jos sellainen syntyy
    }
    lcd.print("!Game Over! :(");
    lcd.setCursor(0,2);
    lcd.print("Peli alkaa alusta 4"); 
    lcd.setCursor(0,3);
    lcd.print("sekunnin kuluttua.");
    winning = false;
    wdt_enable(WDTO_4S); // Lisätään watchdog
    }
    
  }
  req++; // lisätään yksi ledi lisää sarjaan
  a = 0; // nollataan laskurimuuttujat
  i = 0;
  if (winning == true){
  lcd.print("Oikein!");
  delay(1000);
  lcd.clear();
  lcd.print("Peli jatkuu 3");
  delay(800);
  lcd.clear();
  lcd.print("2");
  delay(700);
  lcd.clear();
  lcd.print("1");
  delay(700);
  lcd.clear(); // näytetään lcd:llä pelaajalla hänen voittonsa ja countdown seuraavaan kierrokseen 
  }
}

void blinkLED(void) // blinkataan lediä
{
  if (ledState == LOW) {
    ledState = HIGH;
  } else {
    ledState = LOW;
  }
  digitalWrite(12, ledState);
}

void ledPins(int pin){ // aliohjelma valitsee switchcasella oikean ledin
  switch(pin) {
  case 1:
    ledPin = A0;
    break;
  case 2:
    ledPin = A1;
    break;
  case 3:
    ledPin = A2;
    break;
  case 4:
    ledPin = A3;
    break;
  case 5:
    ledPin = 10;
    break;
  case 6:
    ledPin = 11;
    break;
  default:
    break;
}

}